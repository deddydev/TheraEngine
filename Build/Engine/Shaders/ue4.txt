
float radicalInverse_VdC(uint bits)
{
	bits = (bits << 16u) | (bits >> 16u);
	bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
	bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
	bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
	bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
	return float(bits) * 2.3283064365386963e-10; //divide by 0x100000000
}
// http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
vec2 Hammersley(uint i, uint N)
{
	return vec2(float(i) / float(N), radicalInverse_VdC(i));
}

vec3 ImportanceSampleGGX(vec2 Xi, float a, vec3 N)
{
	float Phi = 2.0f * PI * Xi.x;
	float CosTheta = sqrt((1.0f - Xi.y) / (1.0f + (a * a - 1.0f) * Xi.y));
	float SinTheta = sqrt(1.0f - CosTheta * CosTheta);

	vec H = vec3(SinTheta * cos(Phi), SinTheta * sin(Phi), CosTheta);

	float3 UpVector = abs(N.z) < 0.999f ? vec3(0.0f, 0.0f, 1.0f) : vec3(1.0f, 0.0f, 0.0f);
	float3 TangentX = normalize(cross(UpVector, N));
	float3 TangentY = cross(N, TangentX);

	//Tangent to world space
	return TangentX * H.x + TangentY * H.y + N * H.z;
}

vec3 SpecularIBL(vec3 SpecularColor, float roughness, vec3 N, vec3 V)
{
	vec3 SpecularLighting = vec3(0.0f);
	const uint NumSamples = 1024;
	float a = roughness * roughness;
	for (uint i = 0; i < NumSamples; i++)
	{
		vec2 Xi = Hammersley(i, NumSamples);
		
		vec3 H = ImportanceSampleGGX(Xi, a, N);
		vec3 L = 2.0f * dot(V, H) * H - V;
		float NoV = saturate(dot(N, V));
		float NoL = saturate(dot(N, L));
		float NoH = saturate(dot(N, H));
		float VoH = saturate(dot(V, H));
		if (NoL > 0.0f)
		{
			vec3 SampleColor = EnvMap.SampleLevel(EnvMapSampler, L, 0).rgb;

			float G = SpecG_Smith(NoV, NoL, roughness);
			float Fc = pow(1.0 - VoH, 5);
			vec3 F = (1.0 - Fc) * SpecularColor + Fc;

			// Incident light = SampleColor * NoL
			// Microfacet specular = D*G*F / (4*NoL*NoV)
			// pdf = D * NoH / (4 * VoH)

			SpecularLighting += SampleColor * F * G * VoH / (NoH * NoV);
		}
	}
	return SpecularLighting / NumSamples;
}

vec3 PrefilterEnvMap(float roughness, vec3 R)
{
	vec3 N = R;
	vec3 V = R;
	vec3 PrefilteredColor = 0;
	const uint NumSamples = 1024;
	for (uint i = 0; i < NumSamples; i++)
	{
		vec2 Xi = Hammersley(i, NumSamples);
		vec3 H = ImportanceSampleGGX(Xi, roughness, N);
		vec3 L = 2.0 * dot(V, H) * H - V;
		float NoL = saturate(dot(N, L));
		if (NoL > 0)
		{
			PrefilteredColor += EnvMap.SampleLevel(EnvMapSampler, L, 0).rgb * NoL;
			TotalWeight += NoL;
		}
	}
	return PrefilteredColor / TotalWeight;
}

vec2 IntegrateBRDF(float roughness, float NoV)
{
	vec3 V = vec3(sqrt(1.0f - NoV * NoV), 0.0f, NoV);
	float A = 0;
	float B = 0;
	float a = roughness * roughness;
	const uint NumSamples = 1024;
	for (uint i = 0; i < NumSamples; i++)
	{
		vec2 Xi = Hammersley(i, NumSamples);
		vec3 H = ImportanceSampleGGX(Xi, a, N);
		vec3 L = 2.0f * dot(V, H) * H - V;
		float NoL = saturate(L.z);
		float NoH = saturate(H.z);
		float VoH = saturate(dot(V, H));
		if (NoL > 0)
		{
			float G = SpecG_Smith(NoV, NoL, roughness);
			float G_Vis = G * VoH / (NoH * NoV);
			float Fc = pow(1.0f - VoH, 5.0f);
			A += (1.0f - Fc) * G_Vis;
			B += Fc * G_Vis;
		}
	}
	return vec2(A, B) / NumSamples;
}

vec3 ApproximateSpecularIBL(vec3 specularColor, float roughness, vec3 N, vec3 V)
{
	float NoV = dot(N, V);
	vec3 R = 2.0f * NoV * N - V;
	NoV = saturate(NoV);
	vec3 prefilteredColor = PrefilterEnvMap(roughness, R);
	vec2 envBRDF = IntegrateBRDF(roughness, NoV);
	return prefilteredColor * (specularColor * envBRDF.x + envBRDF.y);
}